{"ast":null,"code":"import { BehaviorSubject, tap, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass TransactionService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'api/transactions';\n    this.transactionsSubject = new BehaviorSubject([]);\n    this.transactions$ = this.transactionsSubject.asObservable();\n    this.loadTransactions();\n  }\n  loadTransactions() {\n    this.http.get(this.apiUrl).subscribe(transactions => {\n      this.transactionsSubject.next(transactions);\n    });\n  }\n  getTransactions() {\n    return this.transactions$;\n  }\n  getTransactionsByAccount(accountId) {\n    return this.transactions$.pipe(map(transactions => transactions.filter(transaction => transaction.accountId === accountId)));\n  }\n  getTransactionsByType(type) {\n    return this.transactions$.pipe(map(transactions => transactions.filter(transaction => transaction.type === type)));\n  }\n  addTransaction(transaction) {\n    return this.http.post(this.apiUrl, transaction).pipe(tap(newTransaction => {\n      const currentTransactions = this.transactionsSubject.value;\n      this.transactionsSubject.next([...currentTransactions, newTransaction]);\n    }));\n  }\n  updateTransaction(id, transaction) {\n    return this.http.put(`${this.apiUrl}/${id}`, transaction).pipe(tap(updatedTransaction => {\n      const currentTransactions = this.transactionsSubject.value;\n      const index = currentTransactions.findIndex(t => t.id === id);\n      if (index !== -1) {\n        const updatedTransactions = [...currentTransactions];\n        updatedTransactions[index] = updatedTransaction;\n        this.transactionsSubject.next(updatedTransactions);\n      }\n    }));\n  }\n  deleteTransaction(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(tap(() => {\n      const currentTransactions = this.transactionsSubject.value;\n      this.transactionsSubject.next(currentTransactions.filter(transaction => transaction.id !== id));\n    }));\n  }\n  getTotalDepositsByAccount(accountId) {\n    return this.getTransactionsByAccount(accountId).pipe(map(transactions => transactions.filter(t => t.type === 'deposit').reduce((sum, t) => sum + t.amount, 0)));\n  }\n  getTotalWithdrawalsByAccount(accountId) {\n    return this.getTransactionsByAccount(accountId).pipe(map(transactions => transactions.filter(t => t.type === 'withdrawal').reduce((sum, t) => sum + t.amount, 0)));\n  }\n  static {\n    this.ɵfac = function TransactionService_Factory(t) {\n      return new (t || TransactionService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TransactionService,\n      factory: TransactionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { TransactionService };","map":{"version":3,"names":["BehaviorSubject","tap","map","TransactionService","constructor","http","apiUrl","transactionsSubject","transactions$","asObservable","loadTransactions","get","subscribe","transactions","next","getTransactions","getTransactionsByAccount","accountId","pipe","filter","transaction","getTransactionsByType","type","addTransaction","post","newTransaction","currentTransactions","value","updateTransaction","id","put","updatedTransaction","index","findIndex","t","updatedTransactions","deleteTransaction","delete","getTotalDepositsByAccount","reduce","sum","amount","getTotalWithdrawalsByAccount","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/vagrant/workspace/windsurf/tradetracker/frontend-tradetracker/src/app/services/transaction.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, tap, map } from 'rxjs';\nimport { Transaction, TransactionType } from '../models/transaction.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TransactionService {\n  private apiUrl = 'api/transactions';\n  private transactionsSubject = new BehaviorSubject<Transaction[]>([]);\n  transactions$ = this.transactionsSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    this.loadTransactions();\n  }\n\n  private loadTransactions(): void {\n    this.http.get<Transaction[]>(this.apiUrl)\n      .subscribe(transactions => {\n        this.transactionsSubject.next(transactions);\n      });\n  }\n\n  getTransactions(): Observable<Transaction[]> {\n    return this.transactions$;\n  }\n\n  getTransactionsByAccount(accountId: string): Observable<Transaction[]> {\n    return this.transactions$.pipe(\n      map(transactions => transactions.filter(transaction => transaction.accountId === accountId))\n    );\n  }\n\n  getTransactionsByType(type: TransactionType): Observable<Transaction[]> {\n    return this.transactions$.pipe(\n      map(transactions => transactions.filter(transaction => transaction.type === type))\n    );\n  }\n\n  addTransaction(transaction: Omit<Transaction, 'id'>): Observable<Transaction> {\n    return this.http.post<Transaction>(this.apiUrl, transaction).pipe(\n      tap(newTransaction => {\n        const currentTransactions = this.transactionsSubject.value;\n        this.transactionsSubject.next([...currentTransactions, newTransaction]);\n      })\n    );\n  }\n\n  updateTransaction(id: string, transaction: Partial<Transaction>): Observable<Transaction> {\n    return this.http.put<Transaction>(`${this.apiUrl}/${id}`, transaction).pipe(\n      tap(updatedTransaction => {\n        const currentTransactions = this.transactionsSubject.value;\n        const index = currentTransactions.findIndex(t => t.id === id);\n        if (index !== -1) {\n          const updatedTransactions = [...currentTransactions];\n          updatedTransactions[index] = updatedTransaction;\n          this.transactionsSubject.next(updatedTransactions);\n        }\n      })\n    );\n  }\n\n  deleteTransaction(id: string): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/${id}`).pipe(\n      tap(() => {\n        const currentTransactions = this.transactionsSubject.value;\n        this.transactionsSubject.next(currentTransactions.filter(transaction => transaction.id !== id));\n      })\n    );\n  }\n\n  getTotalDepositsByAccount(accountId: string): Observable<number> {\n    return this.getTransactionsByAccount(accountId).pipe(\n      map(transactions => \n        transactions\n          .filter(t => t.type === 'deposit')\n          .reduce((sum, t) => sum + t.amount, 0)\n      )\n    );\n  }\n\n  getTotalWithdrawalsByAccount(accountId: string): Observable<number> {\n    return this.getTransactionsByAccount(accountId).pipe(\n      map(transactions => \n        transactions\n          .filter(t => t.type === 'withdrawal')\n          .reduce((sum, t) => sum + t.amount, 0)\n      )\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
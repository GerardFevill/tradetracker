{"ast":null,"code":"import { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\n// Mock data\nconst accounts = [{\n  id: '1',\n  name: 'Compte Principal USD',\n  broker: 'Roboforex',\n  currency: 'USD',\n  currentBalance: 5240.75,\n  targetBalance: 10000,\n  withdrawalThreshold: 5000,\n  totalDeposits: 3000,\n  totalWithdrawals: 500,\n  createdAt: new Date('2024-01-15'),\n  updatedAt: new Date('2025-04-10')\n}, {\n  id: '2',\n  name: 'Compte Secondaire EUR',\n  broker: 'IC Markets',\n  currency: 'EUR',\n  currentBalance: 3850.20,\n  targetBalance: 5000,\n  withdrawalThreshold: 3500,\n  totalDeposits: 2500,\n  totalWithdrawals: 0,\n  createdAt: new Date('2024-03-05'),\n  updatedAt: new Date('2025-05-01')\n}, {\n  id: '3',\n  name: 'Compte Test USD',\n  broker: 'Other',\n  currency: 'USD',\n  currentBalance: 1200.50,\n  targetBalance: 2000,\n  withdrawalThreshold: 1000,\n  totalDeposits: 1000,\n  totalWithdrawals: 0,\n  createdAt: new Date('2025-01-10'),\n  updatedAt: new Date('2025-05-15')\n}];\nconst transactions = [{\n  id: '1',\n  accountId: '1',\n  type: 'deposit',\n  amount: 1000,\n  currency: 'USD',\n  date: new Date('2024-01-15'),\n  description: 'Dépôt initial'\n}, {\n  id: '2',\n  accountId: '1',\n  type: 'deposit',\n  amount: 2000,\n  currency: 'USD',\n  date: new Date('2024-02-20'),\n  description: 'Ajout de fonds'\n}, {\n  id: '3',\n  accountId: '1',\n  type: 'withdrawal',\n  amount: 500,\n  currency: 'USD',\n  date: new Date('2025-03-15'),\n  description: 'Retrait partiel'\n}, {\n  id: '4',\n  accountId: '2',\n  type: 'deposit',\n  amount: 2500,\n  currency: 'EUR',\n  date: new Date('2024-03-05'),\n  description: 'Dépôt initial'\n}, {\n  id: '5',\n  accountId: '3',\n  type: 'deposit',\n  amount: 1000,\n  currency: 'USD',\n  date: new Date('2025-01-10'),\n  description: 'Dépôt initial'\n}];\nclass MockApiInterceptor {\n  intercept(request, next) {\n    const {\n      url,\n      method,\n      headers,\n      body\n    } = request;\n    // Wrap in delayed observable to simulate server api call\n    return of(null).pipe(delay(500)).pipe(materialize()).pipe(dematerialize()).pipe(delay(500)).pipe(() => {\n      // Accounts API\n      if (url.endsWith('/api/accounts') && method === 'GET') {\n        return of(new HttpResponse({\n          status: 200,\n          body: accounts\n        }));\n      }\n      if (url.match(/\\/api\\/accounts\\/\\d+$/) && method === 'GET') {\n        const id = url.split('/').pop();\n        const account = accounts.find(a => a.id === id);\n        return account ? of(new HttpResponse({\n          status: 200,\n          body: account\n        })) : throwError(() => new Error('Account not found'));\n      }\n      if (url.endsWith('/api/accounts') && method === 'POST') {\n        const newAccount = {\n          ...body,\n          id: (accounts.length + 1).toString(),\n          createdAt: new Date(),\n          updatedAt: new Date()\n        };\n        accounts.push(newAccount);\n        return of(new HttpResponse({\n          status: 201,\n          body: newAccount\n        }));\n      }\n      if (url.match(/\\/api\\/accounts\\/\\d+$/) && method === 'PUT') {\n        const id = url.split('/').pop();\n        const accountIndex = accounts.findIndex(a => a.id === id);\n        if (accountIndex === -1) return throwError(() => new Error('Account not found'));\n        accounts[accountIndex] = {\n          ...accounts[accountIndex],\n          ...body,\n          updatedAt: new Date()\n        };\n        return of(new HttpResponse({\n          status: 200,\n          body: accounts[accountIndex]\n        }));\n      }\n      if (url.match(/\\/api\\/accounts\\/\\d+$/) && method === 'DELETE') {\n        const id = url.split('/').pop();\n        const accountIndex = accounts.findIndex(a => a.id === id);\n        if (accountIndex === -1) return throwError(() => new Error('Account not found'));\n        accounts.splice(accountIndex, 1);\n        return of(new HttpResponse({\n          status: 204\n        }));\n      }\n      // Transactions API\n      if (url.endsWith('/api/transactions') && method === 'GET') {\n        return of(new HttpResponse({\n          status: 200,\n          body: transactions\n        }));\n      }\n      if (url.match(/\\/api\\/transactions\\/\\d+$/) && method === 'GET') {\n        const id = url.split('/').pop();\n        const transaction = transactions.find(t => t.id === id);\n        return transaction ? of(new HttpResponse({\n          status: 200,\n          body: transaction\n        })) : throwError(() => new Error('Transaction not found'));\n      }\n      if (url.endsWith('/api/transactions') && method === 'POST') {\n        const newTransaction = {\n          ...body,\n          id: (transactions.length + 1).toString(),\n          date: new Date(body.date) || new Date()\n        };\n        transactions.push(newTransaction);\n        return of(new HttpResponse({\n          status: 201,\n          body: newTransaction\n        }));\n      }\n      if (url.match(/\\/api\\/transactions\\/\\d+$/) && method === 'PUT') {\n        const id = url.split('/').pop();\n        const transactionIndex = transactions.findIndex(t => t.id === id);\n        if (transactionIndex === -1) return throwError(() => new Error('Transaction not found'));\n        transactions[transactionIndex] = {\n          ...transactions[transactionIndex],\n          ...body,\n          date: new Date(body.date) || transactions[transactionIndex].date\n        };\n        return of(new HttpResponse({\n          status: 200,\n          body: transactions[transactionIndex]\n        }));\n      }\n      if (url.match(/\\/api\\/transactions\\/\\d+$/) && method === 'DELETE') {\n        const id = url.split('/').pop();\n        const transactionIndex = transactions.findIndex(t => t.id === id);\n        if (transactionIndex === -1) return throwError(() => new Error('Transaction not found'));\n        transactions.splice(transactionIndex, 1);\n        return of(new HttpResponse({\n          status: 204\n        }));\n      }\n      // Pass through any requests not handled above\n      return next.handle(request);\n    });\n  }\n  static {\n    this.ɵfac = function MockApiInterceptor_Factory(t) {\n      return new (t || MockApiInterceptor)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: MockApiInterceptor,\n      factory: MockApiInterceptor.ɵfac\n    });\n  }\n}\nexport { MockApiInterceptor };\nexport const mockApiProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: MockApiInterceptor,\n  multi: true\n};","map":{"version":3,"names":["HttpResponse","HTTP_INTERCEPTORS","of","throwError","delay","materialize","dematerialize","accounts","id","name","broker","currency","currentBalance","targetBalance","withdrawalThreshold","totalDeposits","totalWithdrawals","createdAt","Date","updatedAt","transactions","accountId","type","amount","date","description","MockApiInterceptor","intercept","request","next","url","method","headers","body","pipe","endsWith","status","match","split","pop","account","find","a","Error","newAccount","length","toString","push","accountIndex","findIndex","splice","transaction","t","newTransaction","transactionIndex","handle","factory","ɵfac","mockApiProvider","provide","useClass","multi"],"sources":["/home/vagrant/workspace/windsurf/tradetracker/frontend-tradetracker/src/app/services/mock-api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\nimport { Account, Broker, Currency } from '../models/account.model';\nimport { Transaction, TransactionType } from '../models/transaction.model';\n\n// Mock data\nconst accounts: Account[] = [\n  {\n    id: '1',\n    name: 'Compte Principal USD',\n    broker: 'Roboforex',\n    currency: 'USD',\n    currentBalance: 5240.75,\n    targetBalance: 10000,\n    withdrawalThreshold: 5000,\n    totalDeposits: 3000,\n    totalWithdrawals: 500,\n    createdAt: new Date('2024-01-15'),\n    updatedAt: new Date('2025-04-10')\n  },\n  {\n    id: '2',\n    name: 'Compte Secondaire EUR',\n    broker: 'IC Markets',\n    currency: 'EUR',\n    currentBalance: 3850.20,\n    targetBalance: 5000,\n    withdrawalThreshold: 3500,\n    totalDeposits: 2500,\n    totalWithdrawals: 0,\n    createdAt: new Date('2024-03-05'),\n    updatedAt: new Date('2025-05-01')\n  },\n  {\n    id: '3',\n    name: 'Compte Test USD',\n    broker: 'Other',\n    currency: 'USD',\n    currentBalance: 1200.50,\n    targetBalance: 2000,\n    withdrawalThreshold: 1000,\n    totalDeposits: 1000,\n    totalWithdrawals: 0,\n    createdAt: new Date('2025-01-10'),\n    updatedAt: new Date('2025-05-15')\n  }\n];\n\nconst transactions: Transaction[] = [\n  {\n    id: '1',\n    accountId: '1',\n    type: 'deposit',\n    amount: 1000,\n    currency: 'USD',\n    date: new Date('2024-01-15'),\n    description: 'Dépôt initial'\n  },\n  {\n    id: '2',\n    accountId: '1',\n    type: 'deposit',\n    amount: 2000,\n    currency: 'USD',\n    date: new Date('2024-02-20'),\n    description: 'Ajout de fonds'\n  },\n  {\n    id: '3',\n    accountId: '1',\n    type: 'withdrawal',\n    amount: 500,\n    currency: 'USD',\n    date: new Date('2025-03-15'),\n    description: 'Retrait partiel'\n  },\n  {\n    id: '4',\n    accountId: '2',\n    type: 'deposit',\n    amount: 2500,\n    currency: 'EUR',\n    date: new Date('2024-03-05'),\n    description: 'Dépôt initial'\n  },\n  {\n    id: '5',\n    accountId: '3',\n    type: 'deposit',\n    amount: 1000,\n    currency: 'USD',\n    date: new Date('2025-01-10'),\n    description: 'Dépôt initial'\n  }\n];\n\n@Injectable()\nexport class MockApiInterceptor implements HttpInterceptor {\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const { url, method, headers, body } = request;\n\n    // Wrap in delayed observable to simulate server api call\n    return of(null)\n      .pipe(delay(500))\n      .pipe(materialize())\n      .pipe(dematerialize())\n      .pipe(delay(500))\n      .pipe(() => {\n        // Accounts API\n        if (url.endsWith('/api/accounts') && method === 'GET') {\n          return of(new HttpResponse({ status: 200, body: accounts }));\n        }\n        \n        if (url.match(/\\/api\\/accounts\\/\\d+$/) && method === 'GET') {\n          const id = url.split('/').pop();\n          const account = accounts.find(a => a.id === id);\n          return account \n            ? of(new HttpResponse({ status: 200, body: account }))\n            : throwError(() => new Error('Account not found'));\n        }\n        \n        if (url.endsWith('/api/accounts') && method === 'POST') {\n          const newAccount: Account = {\n            ...body,\n            id: (accounts.length + 1).toString(),\n            createdAt: new Date(),\n            updatedAt: new Date()\n          };\n          accounts.push(newAccount);\n          return of(new HttpResponse({ status: 201, body: newAccount }));\n        }\n        \n        if (url.match(/\\/api\\/accounts\\/\\d+$/) && method === 'PUT') {\n          const id = url.split('/').pop();\n          const accountIndex = accounts.findIndex(a => a.id === id);\n          if (accountIndex === -1) return throwError(() => new Error('Account not found'));\n          \n          accounts[accountIndex] = { \n            ...accounts[accountIndex], \n            ...body,\n            updatedAt: new Date()\n          };\n          return of(new HttpResponse({ status: 200, body: accounts[accountIndex] }));\n        }\n        \n        if (url.match(/\\/api\\/accounts\\/\\d+$/) && method === 'DELETE') {\n          const id = url.split('/').pop();\n          const accountIndex = accounts.findIndex(a => a.id === id);\n          if (accountIndex === -1) return throwError(() => new Error('Account not found'));\n          \n          accounts.splice(accountIndex, 1);\n          return of(new HttpResponse({ status: 204 }));\n        }\n        \n        // Transactions API\n        if (url.endsWith('/api/transactions') && method === 'GET') {\n          return of(new HttpResponse({ status: 200, body: transactions }));\n        }\n        \n        if (url.match(/\\/api\\/transactions\\/\\d+$/) && method === 'GET') {\n          const id = url.split('/').pop();\n          const transaction = transactions.find(t => t.id === id);\n          return transaction \n            ? of(new HttpResponse({ status: 200, body: transaction }))\n            : throwError(() => new Error('Transaction not found'));\n        }\n        \n        if (url.endsWith('/api/transactions') && method === 'POST') {\n          const newTransaction: Transaction = {\n            ...body,\n            id: (transactions.length + 1).toString(),\n            date: new Date(body.date) || new Date()\n          };\n          transactions.push(newTransaction);\n          return of(new HttpResponse({ status: 201, body: newTransaction }));\n        }\n        \n        if (url.match(/\\/api\\/transactions\\/\\d+$/) && method === 'PUT') {\n          const id = url.split('/').pop();\n          const transactionIndex = transactions.findIndex(t => t.id === id);\n          if (transactionIndex === -1) return throwError(() => new Error('Transaction not found'));\n          \n          transactions[transactionIndex] = { \n            ...transactions[transactionIndex], \n            ...body,\n            date: new Date(body.date) || transactions[transactionIndex].date\n          };\n          return of(new HttpResponse({ status: 200, body: transactions[transactionIndex] }));\n        }\n        \n        if (url.match(/\\/api\\/transactions\\/\\d+$/) && method === 'DELETE') {\n          const id = url.split('/').pop();\n          const transactionIndex = transactions.findIndex(t => t.id === id);\n          if (transactionIndex === -1) return throwError(() => new Error('Transaction not found'));\n          \n          transactions.splice(transactionIndex, 1);\n          return of(new HttpResponse({ status: 204 }));\n        }\n        \n        // Pass through any requests not handled above\n        return next.handle(request);\n      });\n  }\n}\n\nexport const mockApiProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: MockApiInterceptor,\n  multi: true\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
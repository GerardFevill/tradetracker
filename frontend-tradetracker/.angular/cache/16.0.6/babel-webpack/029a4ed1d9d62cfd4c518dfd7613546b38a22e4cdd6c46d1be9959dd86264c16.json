{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { map } from 'rxjs';\nlet DashboardComponent = class DashboardComponent {\n  constructor(accountService, analyticsService) {\n    this.accountService = accountService;\n    this.analyticsService = analyticsService;\n    // Données pour le graphique d'évolution des soldes (simulées pour l'exemple)\n    this.balanceHistory = [{\n      month: 'Jan',\n      usd: 10000,\n      eur: 7500\n    }, {\n      month: 'Fév',\n      usd: 11200,\n      eur: 8100\n    }, {\n      month: 'Mar',\n      usd: 12500,\n      eur: 8800\n    }, {\n      month: 'Avr',\n      usd: 13100,\n      eur: 9200\n    }, {\n      month: 'Mai',\n      usd: 15000,\n      eur: 10000\n    }, {\n      month: 'Juin',\n      usd: 14800,\n      eur: 10500\n    }];\n  }\n  ngOnInit() {\n    this.accountSummary$ = this.accountService.getAccountSummary();\n    this.accountsAboveThreshold$ = this.analyticsService.getAccountsAboveThreshold();\n    this.totalBalanceUSD$ = this.analyticsService.getTotalBalanceInCurrency('USD');\n    this.totalBalanceEUR$ = this.analyticsService.getTotalBalanceInCurrency('EUR');\n    // Calcul des comptes par broker\n    this.accountsByBroker$ = this.accountService.getAccounts().pipe(map(accounts => {\n      const brokers = accounts.reduce((acc, account) => {\n        acc[account.broker] = (acc[account.broker] || 0) + 1;\n        return acc;\n      }, {});\n      const total = accounts.length;\n      return Object.entries(brokers).map(([broker, count]) => ({\n        broker,\n        count,\n        percentage: count / total * 100\n      }));\n    }));\n    // Calcul des comptes par devise\n    this.accountsByCurrency$ = this.accountService.getAccounts().pipe(map(accounts => {\n      const currencies = accounts.reduce((acc, account) => {\n        acc[account.currency] = (acc[account.currency] || 0) + 1;\n        return acc;\n      }, {});\n      const total = accounts.length;\n      return Object.entries(currencies).map(([currency, count]) => ({\n        currency,\n        count,\n        percentage: count / total * 100\n      }));\n    }));\n  }\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})], DashboardComponent);\nexport { DashboardComponent };","map":{"version":3,"names":["Component","map","DashboardComponent","constructor","accountService","analyticsService","balanceHistory","month","usd","eur","ngOnInit","accountSummary$","getAccountSummary","accountsAboveThreshold$","getAccountsAboveThreshold","totalBalanceUSD$","getTotalBalanceInCurrency","totalBalanceEUR$","accountsByBroker$","getAccounts","pipe","accounts","brokers","reduce","acc","account","broker","total","length","Object","entries","count","percentage","accountsByCurrency$","currencies","currency","__decorate","selector","templateUrl","styleUrls"],"sources":["/home/vagrant/workspace/windsurf/tradetracker/frontend-tradetracker/src/app/components/dashboard/dashboard.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Observable, map } from 'rxjs';\nimport { AccountService } from '../../services/account.service';\nimport { AnalyticsService } from '../../services/analytics.service';\nimport { Account, AccountSummary } from '../../models/account.model';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n  accountSummary$!: Observable<AccountSummary>;\n  accountsAboveThreshold$!: Observable<Account[]>;\n  totalBalanceUSD$!: Observable<number>;\n  totalBalanceEUR$!: Observable<number>;\n  \n  // Données pour les graphiques\n  accountsByBroker$!: Observable<{broker: string, count: number, percentage: number}[]>;\n  accountsByCurrency$!: Observable<{currency: string, count: number, percentage: number}[]>;\n  \n  // Données pour le graphique d'évolution des soldes (simulées pour l'exemple)\n  balanceHistory = [\n    { month: 'Jan', usd: 10000, eur: 7500 },\n    { month: 'Fév', usd: 11200, eur: 8100 },\n    { month: 'Mar', usd: 12500, eur: 8800 },\n    { month: 'Avr', usd: 13100, eur: 9200 },\n    { month: 'Mai', usd: 15000, eur: 10000 },\n    { month: 'Juin', usd: 14800, eur: 10500 }\n  ];\n\n  constructor(\n    private accountService: AccountService,\n    private analyticsService: AnalyticsService\n  ) {}\n\n  ngOnInit(): void {\n    this.accountSummary$ = this.accountService.getAccountSummary();\n    this.accountsAboveThreshold$ = this.analyticsService.getAccountsAboveThreshold();\n    this.totalBalanceUSD$ = this.analyticsService.getTotalBalanceInCurrency('USD');\n    this.totalBalanceEUR$ = this.analyticsService.getTotalBalanceInCurrency('EUR');\n    \n    // Calcul des comptes par broker\n    this.accountsByBroker$ = this.accountService.getAccounts().pipe(\n      map(accounts => {\n        const brokers = accounts.reduce((acc, account) => {\n          acc[account.broker] = (acc[account.broker] || 0) + 1;\n          return acc;\n        }, {} as {[key: string]: number});\n        \n        const total = accounts.length;\n        \n        return Object.entries(brokers).map(([broker, count]) => ({\n          broker,\n          count,\n          percentage: (count / total) * 100\n        }));\n      })\n    );\n    \n    // Calcul des comptes par devise\n    this.accountsByCurrency$ = this.accountService.getAccounts().pipe(\n      map(accounts => {\n        const currencies = accounts.reduce((acc, account) => {\n          acc[account.currency] = (acc[account.currency] || 0) + 1;\n          return acc;\n        }, {} as {[key: string]: number});\n        \n        const total = accounts.length;\n        \n        return Object.entries(currencies).map(([currency, count]) => ({\n          currency,\n          count,\n          percentage: (count / total) * 100\n        }));\n      })\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
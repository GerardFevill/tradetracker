{"ast":null,"code":"import { BehaviorSubject, tap, map, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass TransactionService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'api/transactions';\n    this.transactionsSubject = new BehaviorSubject([]);\n    this.transactions$ = this.transactionsSubject.asObservable();\n    // Données mockées pour simuler les réponses API\n    this.mockTransactions = [{\n      id: '1',\n      accountId: '1',\n      type: 'deposit',\n      amount: 5000,\n      currency: 'USD',\n      date: new Date('2024-01-20'),\n      description: 'Dépôt initial'\n    }, {\n      id: '2',\n      accountId: '1',\n      type: 'deposit',\n      amount: 3000,\n      currency: 'USD',\n      date: new Date('2024-02-15'),\n      description: 'Ajout de fonds'\n    }, {\n      id: '3',\n      accountId: '1',\n      type: 'withdrawal',\n      amount: 1000,\n      currency: 'USD',\n      date: new Date('2024-03-10'),\n      description: 'Retrait de bénéfices'\n    }, {\n      id: '4',\n      accountId: '2',\n      type: 'deposit',\n      amount: 4000,\n      currency: 'EUR',\n      date: new Date('2024-02-20'),\n      description: 'Dépôt initial'\n    }, {\n      id: '5',\n      accountId: '2',\n      type: 'deposit',\n      amount: 2500,\n      currency: 'EUR',\n      date: new Date('2024-03-15'),\n      description: 'Ajout de fonds'\n    }, {\n      id: '6',\n      accountId: '2',\n      type: 'withdrawal',\n      amount: 500,\n      currency: 'EUR',\n      date: new Date('2024-04-10'),\n      description: 'Retrait partiel'\n    }, {\n      id: '7',\n      accountId: '3',\n      type: 'deposit',\n      amount: 3000,\n      currency: 'USD',\n      date: new Date('2024-03-05'),\n      description: 'Financement initial'\n    }, {\n      id: '8',\n      accountId: '4',\n      type: 'deposit',\n      amount: 5000,\n      currency: 'EUR',\n      date: new Date('2024-04-20'),\n      description: 'Dépôt initial'\n    }, {\n      id: '9',\n      accountId: '4',\n      type: 'withdrawal',\n      amount: 500,\n      currency: 'EUR',\n      date: new Date('2024-05-15'),\n      description: 'Retrait test'\n    }, {\n      id: '10',\n      accountId: '5',\n      type: 'deposit',\n      amount: 6000,\n      currency: 'USD',\n      date: new Date('2024-05-01'),\n      description: 'Financement initial'\n    }, {\n      id: '11',\n      accountId: '1',\n      type: 'transfer',\n      amount: 2000,\n      currency: 'USD',\n      date: new Date('2024-04-05'),\n      description: 'Transfert vers compte EUR',\n      targetAccountId: '2',\n      exchangeRate: 0.92\n    }, {\n      id: '12',\n      accountId: '2',\n      type: 'deposit',\n      amount: 1840,\n      currency: 'EUR',\n      date: new Date('2024-04-05'),\n      description: 'Transfert depuis compte USD'\n    }];\n    // Initialiser avec les données mockées au lieu d'appeler l'API\n    this.transactionsSubject.next(this.mockTransactions);\n  }\n  // Méthode mockée pour simuler le chargement des transactions depuis l'API\n  loadTransactions() {\n    // Simuler un délai de réseau\n    setTimeout(() => {\n      this.transactionsSubject.next(this.mockTransactions);\n    }, 300);\n  }\n  getTransactions() {\n    return this.transactions$;\n  }\n  getTransactionsByAccount(accountId) {\n    return this.transactions$.pipe(map(transactions => transactions.filter(transaction => transaction.accountId === accountId)));\n  }\n  getTransactionsByType(type) {\n    return this.transactions$.pipe(map(transactions => transactions.filter(transaction => transaction.type === type)));\n  }\n  addTransaction(transaction) {\n    // Simuler la création d'une transaction avec un ID généré\n    const newTransaction = {\n      ...transaction,\n      id: Math.random().toString(36).substring(2, 11),\n      date: new Date()\n    };\n    // Simuler un délai de réseau\n    return of(newTransaction).pipe(tap(createdTransaction => {\n      const currentTransactions = this.transactionsSubject.value;\n      this.transactionsSubject.next([...currentTransactions, createdTransaction]);\n    }));\n  }\n  updateTransaction(id, transaction) {\n    // Trouver la transaction à mettre à jour\n    const currentTransactions = this.transactionsSubject.value;\n    const index = currentTransactions.findIndex(t => t.id === id);\n    if (index === -1) {\n      return of(null);\n    }\n    // Créer la transaction mise à jour\n    const updatedTransaction = {\n      ...currentTransactions[index],\n      ...transaction\n    };\n    // Mettre à jour la liste des transactions\n    const updatedTransactions = [...currentTransactions];\n    updatedTransactions[index] = updatedTransaction;\n    // Simuler un délai de réseau\n    return of(updatedTransaction).pipe(tap(() => {\n      this.transactionsSubject.next(updatedTransactions);\n    }));\n  }\n  deleteTransaction(id) {\n    // Simuler un délai de réseau\n    return of(undefined).pipe(tap(() => {\n      const currentTransactions = this.transactionsSubject.value;\n      this.transactionsSubject.next(currentTransactions.filter(transaction => transaction.id !== id));\n    }));\n  }\n  getTotalDepositsByAccount(accountId) {\n    return this.getTransactionsByAccount(accountId).pipe(map(transactions => transactions.filter(t => t.type === 'deposit').reduce((sum, t) => sum + t.amount, 0)));\n  }\n  getTotalWithdrawalsByAccount(accountId) {\n    return this.getTransactionsByAccount(accountId).pipe(map(transactions => transactions.filter(t => t.type === 'withdrawal').reduce((sum, t) => sum + t.amount, 0)));\n  }\n  static {\n    this.ɵfac = function TransactionService_Factory(t) {\n      return new (t || TransactionService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TransactionService,\n      factory: TransactionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { TransactionService };","map":{"version":3,"names":["BehaviorSubject","tap","map","of","TransactionService","constructor","http","apiUrl","transactionsSubject","transactions$","asObservable","mockTransactions","id","accountId","type","amount","currency","date","Date","description","targetAccountId","exchangeRate","next","loadTransactions","setTimeout","getTransactions","getTransactionsByAccount","pipe","transactions","filter","transaction","getTransactionsByType","addTransaction","newTransaction","Math","random","toString","substring","createdTransaction","currentTransactions","value","updateTransaction","index","findIndex","t","updatedTransaction","updatedTransactions","deleteTransaction","undefined","getTotalDepositsByAccount","reduce","sum","getTotalWithdrawalsByAccount","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/vagrant/workspace/windsurf/tradetracker/frontend-tradetracker/src/app/services/transaction.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, tap, map, of } from 'rxjs';\nimport { Transaction, TransactionType } from '../models/transaction.model';\nimport { Currency } from '../models/account.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TransactionService {\n  private apiUrl = 'api/transactions';\n  private transactionsSubject = new BehaviorSubject<Transaction[]>([]);\n  transactions$ = this.transactionsSubject.asObservable();\n\n  // Données mockées pour simuler les réponses API\n  private mockTransactions: Transaction[] = [\n    {\n      id: '1',\n      accountId: '1',\n      type: 'deposit',\n      amount: 5000,\n      currency: 'USD',\n      date: new Date('2024-01-20'),\n      description: 'Dépôt initial'\n    },\n    {\n      id: '2',\n      accountId: '1',\n      type: 'deposit',\n      amount: 3000,\n      currency: 'USD',\n      date: new Date('2024-02-15'),\n      description: 'Ajout de fonds'\n    },\n    {\n      id: '3',\n      accountId: '1',\n      type: 'withdrawal',\n      amount: 1000,\n      currency: 'USD',\n      date: new Date('2024-03-10'),\n      description: 'Retrait de bénéfices'\n    },\n    {\n      id: '4',\n      accountId: '2',\n      type: 'deposit',\n      amount: 4000,\n      currency: 'EUR',\n      date: new Date('2024-02-20'),\n      description: 'Dépôt initial'\n    },\n    {\n      id: '5',\n      accountId: '2',\n      type: 'deposit',\n      amount: 2500,\n      currency: 'EUR',\n      date: new Date('2024-03-15'),\n      description: 'Ajout de fonds'\n    },\n    {\n      id: '6',\n      accountId: '2',\n      type: 'withdrawal',\n      amount: 500,\n      currency: 'EUR',\n      date: new Date('2024-04-10'),\n      description: 'Retrait partiel'\n    },\n    {\n      id: '7',\n      accountId: '3',\n      type: 'deposit',\n      amount: 3000,\n      currency: 'USD',\n      date: new Date('2024-03-05'),\n      description: 'Financement initial'\n    },\n    {\n      id: '8',\n      accountId: '4',\n      type: 'deposit',\n      amount: 5000,\n      currency: 'EUR',\n      date: new Date('2024-04-20'),\n      description: 'Dépôt initial'\n    },\n    {\n      id: '9',\n      accountId: '4',\n      type: 'withdrawal',\n      amount: 500,\n      currency: 'EUR',\n      date: new Date('2024-05-15'),\n      description: 'Retrait test'\n    },\n    {\n      id: '10',\n      accountId: '5',\n      type: 'deposit',\n      amount: 6000,\n      currency: 'USD',\n      date: new Date('2024-05-01'),\n      description: 'Financement initial'\n    },\n    {\n      id: '11',\n      accountId: '1',\n      type: 'transfer',\n      amount: 2000,\n      currency: 'USD',\n      date: new Date('2024-04-05'),\n      description: 'Transfert vers compte EUR',\n      targetAccountId: '2',\n      exchangeRate: 0.92\n    },\n    {\n      id: '12',\n      accountId: '2',\n      type: 'deposit',\n      amount: 1840,\n      currency: 'EUR',\n      date: new Date('2024-04-05'),\n      description: 'Transfert depuis compte USD',\n    }\n  ];\n\n  constructor(private http: HttpClient) {\n    // Initialiser avec les données mockées au lieu d'appeler l'API\n    this.transactionsSubject.next(this.mockTransactions);\n  }\n\n  // Méthode mockée pour simuler le chargement des transactions depuis l'API\n  private loadTransactions(): void {\n    // Simuler un délai de réseau\n    setTimeout(() => {\n      this.transactionsSubject.next(this.mockTransactions);\n    }, 300);\n  }\n\n  getTransactions(): Observable<Transaction[]> {\n    return this.transactions$;\n  }\n\n  getTransactionsByAccount(accountId: string): Observable<Transaction[]> {\n    return this.transactions$.pipe(\n      map(transactions => transactions.filter(transaction => transaction.accountId === accountId))\n    );\n  }\n\n  getTransactionsByType(type: TransactionType): Observable<Transaction[]> {\n    return this.transactions$.pipe(\n      map(transactions => transactions.filter(transaction => transaction.type === type))\n    );\n  }\n\n  addTransaction(transaction: Omit<Transaction, 'id'>): Observable<Transaction> {\n    // Simuler la création d'une transaction avec un ID généré\n    const newTransaction: Transaction = {\n      ...transaction as any,\n      id: Math.random().toString(36).substring(2, 11),\n      date: new Date()\n    };\n    \n    // Simuler un délai de réseau\n    return of(newTransaction).pipe(\n      tap(createdTransaction => {\n        const currentTransactions = this.transactionsSubject.value;\n        this.transactionsSubject.next([...currentTransactions, createdTransaction]);\n      })\n    );\n  }\n\n  updateTransaction(id: string, transaction: Partial<Transaction>): Observable<Transaction> {\n    // Trouver la transaction à mettre à jour\n    const currentTransactions = this.transactionsSubject.value;\n    const index = currentTransactions.findIndex(t => t.id === id);\n    \n    if (index === -1) {\n      return of(null as any);\n    }\n    \n    // Créer la transaction mise à jour\n    const updatedTransaction: Transaction = {\n      ...currentTransactions[index],\n      ...transaction\n    };\n    \n    // Mettre à jour la liste des transactions\n    const updatedTransactions = [...currentTransactions];\n    updatedTransactions[index] = updatedTransaction;\n    \n    // Simuler un délai de réseau\n    return of(updatedTransaction).pipe(\n      tap(() => {\n        this.transactionsSubject.next(updatedTransactions);\n      })\n    );\n  }\n\n  deleteTransaction(id: string): Observable<void> {\n    // Simuler un délai de réseau\n    return of(undefined).pipe(\n      tap(() => {\n        const currentTransactions = this.transactionsSubject.value;\n        this.transactionsSubject.next(currentTransactions.filter(transaction => transaction.id !== id));\n      })\n    );\n  }\n\n  getTotalDepositsByAccount(accountId: string): Observable<number> {\n    return this.getTransactionsByAccount(accountId).pipe(\n      map(transactions => \n        transactions\n          .filter(t => t.type === 'deposit')\n          .reduce((sum, t) => sum + t.amount, 0)\n      )\n    );\n  }\n\n  getTotalWithdrawalsByAccount(accountId: string): Observable<number> {\n    return this.getTransactionsByAccount(accountId).pipe(\n      map(transactions => \n        transactions\n          .filter(t => t.type === 'withdrawal')\n          .reduce((sum, t) => sum + t.amount, 0)\n      )\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
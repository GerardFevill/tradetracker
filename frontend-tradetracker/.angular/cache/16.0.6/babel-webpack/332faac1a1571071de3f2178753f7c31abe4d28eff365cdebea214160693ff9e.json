{"ast":null,"code":"import { BehaviorSubject, map, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AccountService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'api/accounts';\n    this.accountsSubject = new BehaviorSubject([]);\n    this.accounts$ = this.accountsSubject.asObservable();\n    this.loadAccounts();\n  }\n  loadAccounts() {\n    this.http.get(this.apiUrl).subscribe(accounts => {\n      this.accountsSubject.next(accounts);\n    });\n  }\n  getAccounts() {\n    return this.accounts$;\n  }\n  getAccountById(id) {\n    return this.accounts$.pipe(map(accounts => accounts.find(account => account.id === id)));\n  }\n  getAccountsByBroker(broker) {\n    return this.accounts$.pipe(map(accounts => accounts.filter(account => account.broker === broker)));\n  }\n  getAccountsByCurrency(currency) {\n    return this.accounts$.pipe(map(accounts => accounts.filter(account => account.currency === currency)));\n  }\n  createAccount(account) {\n    return this.http.post(this.apiUrl, account).pipe(tap(newAccount => {\n      const currentAccounts = this.accountsSubject.value;\n      this.accountsSubject.next([...currentAccounts, newAccount]);\n    }));\n  }\n  updateAccount(id, account) {\n    return this.http.put(`${this.apiUrl}/${id}`, account).pipe(tap(updatedAccount => {\n      const currentAccounts = this.accountsSubject.value;\n      const index = currentAccounts.findIndex(a => a.id === id);\n      if (index !== -1) {\n        const updatedAccounts = [...currentAccounts];\n        updatedAccounts[index] = updatedAccount;\n        this.accountsSubject.next(updatedAccounts);\n      }\n    }));\n  }\n  deleteAccount(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(tap(() => {\n      const currentAccounts = this.accountsSubject.value;\n      this.accountsSubject.next(currentAccounts.filter(account => account.id !== id));\n    }));\n  }\n  getAccountSummary() {\n    return this.accounts$.pipe(map(accounts => {\n      const usdAccounts = accounts.filter(account => account.currency === 'USD');\n      const eurAccounts = accounts.filter(account => account.currency === 'EUR');\n      const totalBalanceUSD = usdAccounts.reduce((sum, account) => sum + account.currentBalance, 0);\n      const totalBalanceEUR = eurAccounts.reduce((sum, account) => sum + account.currentBalance, 0);\n      const totalTargetUSD = usdAccounts.reduce((sum, account) => sum + account.targetBalance, 0);\n      const totalTargetEUR = eurAccounts.reduce((sum, account) => sum + account.targetBalance, 0);\n      const performanceUSD = totalTargetUSD > 0 ? totalBalanceUSD / totalTargetUSD * 100 : 0;\n      const performanceEUR = totalTargetEUR > 0 ? totalBalanceEUR / totalTargetEUR * 100 : 0;\n      return {\n        totalAccounts: accounts.length,\n        totalBalanceUSD,\n        totalBalanceEUR,\n        totalTargetUSD,\n        totalTargetEUR,\n        performanceUSD,\n        performanceEUR\n      };\n    }));\n  }\n  static {\n    this.ɵfac = function AccountService_Factory(t) {\n      return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AccountService,\n      factory: AccountService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AccountService };","map":{"version":3,"names":["BehaviorSubject","map","tap","AccountService","constructor","http","apiUrl","accountsSubject","accounts$","asObservable","loadAccounts","get","subscribe","accounts","next","getAccounts","getAccountById","id","pipe","find","account","getAccountsByBroker","broker","filter","getAccountsByCurrency","currency","createAccount","post","newAccount","currentAccounts","value","updateAccount","put","updatedAccount","index","findIndex","a","updatedAccounts","deleteAccount","delete","getAccountSummary","usdAccounts","eurAccounts","totalBalanceUSD","reduce","sum","currentBalance","totalBalanceEUR","totalTargetUSD","targetBalance","totalTargetEUR","performanceUSD","performanceEUR","totalAccounts","length","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/vagrant/workspace/windsurf/tradetracker/frontend-tradetracker/src/app/services/account.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, map, tap } from 'rxjs';\nimport { Account, AccountSummary, Currency } from '../models/account.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n  private apiUrl = 'api/accounts';\n  private accountsSubject = new BehaviorSubject<Account[]>([]);\n  accounts$ = this.accountsSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    this.loadAccounts();\n  }\n\n  private loadAccounts(): void {\n    this.http.get<Account[]>(this.apiUrl)\n      .subscribe(accounts => {\n        this.accountsSubject.next(accounts);\n      });\n  }\n\n  getAccounts(): Observable<Account[]> {\n    return this.accounts$;\n  }\n\n  getAccountById(id: string): Observable<Account | undefined> {\n    return this.accounts$.pipe(\n      map(accounts => accounts.find(account => account.id === id))\n    );\n  }\n\n  getAccountsByBroker(broker: string): Observable<Account[]> {\n    return this.accounts$.pipe(\n      map(accounts => accounts.filter(account => account.broker === broker))\n    );\n  }\n\n  getAccountsByCurrency(currency: Currency): Observable<Account[]> {\n    return this.accounts$.pipe(\n      map(accounts => accounts.filter(account => account.currency === currency))\n    );\n  }\n\n  createAccount(account: Omit<Account, 'id' | 'createdAt' | 'updatedAt'>): Observable<Account> {\n    return this.http.post<Account>(this.apiUrl, account).pipe(\n      tap(newAccount => {\n        const currentAccounts = this.accountsSubject.value;\n        this.accountsSubject.next([...currentAccounts, newAccount]);\n      })\n    );\n  }\n\n  updateAccount(id: string, account: Partial<Account>): Observable<Account> {\n    return this.http.put<Account>(`${this.apiUrl}/${id}`, account).pipe(\n      tap(updatedAccount => {\n        const currentAccounts = this.accountsSubject.value;\n        const index = currentAccounts.findIndex(a => a.id === id);\n        if (index !== -1) {\n          const updatedAccounts = [...currentAccounts];\n          updatedAccounts[index] = updatedAccount;\n          this.accountsSubject.next(updatedAccounts);\n        }\n      })\n    );\n  }\n\n  deleteAccount(id: string): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/${id}`).pipe(\n      tap(() => {\n        const currentAccounts = this.accountsSubject.value;\n        this.accountsSubject.next(currentAccounts.filter(account => account.id !== id));\n      })\n    );\n  }\n\n  getAccountSummary(): Observable<AccountSummary> {\n    return this.accounts$.pipe(\n      map(accounts => {\n        const usdAccounts = accounts.filter(account => account.currency === 'USD');\n        const eurAccounts = accounts.filter(account => account.currency === 'EUR');\n\n        const totalBalanceUSD = usdAccounts.reduce((sum, account) => sum + account.currentBalance, 0);\n        const totalBalanceEUR = eurAccounts.reduce((sum, account) => sum + account.currentBalance, 0);\n        \n        const totalTargetUSD = usdAccounts.reduce((sum, account) => sum + account.targetBalance, 0);\n        const totalTargetEUR = eurAccounts.reduce((sum, account) => sum + account.targetBalance, 0);\n        \n        const performanceUSD = totalTargetUSD > 0 ? (totalBalanceUSD / totalTargetUSD) * 100 : 0;\n        const performanceEUR = totalTargetEUR > 0 ? (totalBalanceEUR / totalTargetEUR) * 100 : 0;\n\n        return {\n          totalAccounts: accounts.length,\n          totalBalanceUSD,\n          totalBalanceEUR,\n          totalTargetUSD,\n          totalTargetEUR,\n          performanceUSD,\n          performanceEUR\n        };\n      })\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
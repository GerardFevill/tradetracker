{"ast":null,"code":"import { BehaviorSubject, map, tap, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AccountService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'api/accounts';\n    this.accountsSubject = new BehaviorSubject([]);\n    this.accounts$ = this.accountsSubject.asObservable();\n    // Données mockées pour simuler les réponses API\n    this.mockAccounts = [{\n      id: '1',\n      name: 'Compte Trading Principal',\n      broker: 'Roboforex',\n      currency: 'USD',\n      currentBalance: 12450.75,\n      targetBalance: 15000,\n      withdrawalThreshold: 13000,\n      totalDeposits: 10000,\n      totalWithdrawals: 2000,\n      createdAt: new Date('2024-01-15'),\n      updatedAt: new Date('2025-04-28')\n    }, {\n      id: '2',\n      name: 'Compte EUR Stratégie',\n      broker: 'IC Markets',\n      currency: 'EUR',\n      currentBalance: 8750.50,\n      targetBalance: 10000,\n      withdrawalThreshold: 9000,\n      totalDeposits: 7500,\n      totalWithdrawals: 1000,\n      createdAt: new Date('2024-02-10'),\n      updatedAt: new Date('2025-05-15')\n    }, {\n      id: '3',\n      name: 'Compte Test Algorithmes',\n      broker: 'Roboforex',\n      currency: 'USD',\n      currentBalance: 3200.25,\n      targetBalance: 5000,\n      withdrawalThreshold: 4000,\n      totalDeposits: 3000,\n      totalWithdrawals: 0,\n      createdAt: new Date('2024-03-05'),\n      updatedAt: new Date('2025-05-10')\n    }, {\n      id: '4',\n      name: 'Compte EUR Conservateur',\n      broker: 'Other',\n      currency: 'EUR',\n      currentBalance: 5150.80,\n      targetBalance: 6000,\n      withdrawalThreshold: 5500,\n      totalDeposits: 5000,\n      totalWithdrawals: 500,\n      createdAt: new Date('2024-04-20'),\n      updatedAt: new Date('2025-05-18')\n    }, {\n      id: '5',\n      name: 'Compte USD Agressif',\n      broker: 'IC Markets',\n      currency: 'USD',\n      currentBalance: 7820.45,\n      targetBalance: 10000,\n      withdrawalThreshold: 8500,\n      totalDeposits: 6000,\n      totalWithdrawals: 0,\n      createdAt: new Date('2024-05-01'),\n      updatedAt: new Date('2025-05-19')\n    }];\n    // Initialiser avec les données mockées au lieu d'appeler l'API\n    this.accountsSubject.next(this.mockAccounts);\n  }\n  // Méthode mockée pour simuler le chargement des comptes depuis l'API\n  loadAccounts() {\n    // Simuler un délai de réseau\n    setTimeout(() => {\n      this.accountsSubject.next(this.mockAccounts);\n    }, 300);\n  }\n  getAccounts() {\n    return this.accounts$;\n  }\n  getAccountById(id) {\n    return this.accounts$.pipe(map(accounts => accounts.find(account => account.id === id)));\n  }\n  getAccountsByBroker(broker) {\n    return this.accounts$.pipe(map(accounts => accounts.filter(account => account.broker === broker)));\n  }\n  getAccountsByCurrency(currency) {\n    return this.accounts$.pipe(map(accounts => accounts.filter(account => account.currency === currency)));\n  }\n  createAccount(account) {\n    // Simuler la création d'un compte avec un ID généré\n    const newAccount = {\n      ...account,\n      id: Math.random().toString(36).substring(2, 11),\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    // Simuler un délai de réseau\n    return of(newAccount).pipe(tap(createdAccount => {\n      const currentAccounts = this.accountsSubject.value;\n      this.accountsSubject.next([...currentAccounts, createdAccount]);\n    }));\n  }\n  updateAccount(id, account) {\n    // Trouver le compte à mettre à jour\n    const currentAccounts = this.accountsSubject.value;\n    const index = currentAccounts.findIndex(a => a.id === id);\n    if (index === -1) {\n      return of(null);\n    }\n    // Créer le compte mis à jour\n    const updatedAccount = {\n      ...currentAccounts[index],\n      ...account,\n      updatedAt: new Date()\n    };\n    // Mettre à jour la liste des comptes\n    const updatedAccounts = [...currentAccounts];\n    updatedAccounts[index] = updatedAccount;\n    // Simuler un délai de réseau\n    return of(updatedAccount).pipe(tap(() => {\n      this.accountsSubject.next(updatedAccounts);\n    }));\n  }\n  deleteAccount(id) {\n    // Simuler un délai de réseau\n    return of(undefined).pipe(tap(() => {\n      const currentAccounts = this.accountsSubject.value;\n      this.accountsSubject.next(currentAccounts.filter(account => account.id !== id));\n    }));\n  }\n  getAccountSummary() {\n    return this.accounts$.pipe(map(accounts => {\n      const usdAccounts = accounts.filter(account => account.currency === 'USD');\n      const eurAccounts = accounts.filter(account => account.currency === 'EUR');\n      const totalBalanceUSD = usdAccounts.reduce((sum, account) => sum + account.currentBalance, 0);\n      const totalBalanceEUR = eurAccounts.reduce((sum, account) => sum + account.currentBalance, 0);\n      const totalTargetUSD = usdAccounts.reduce((sum, account) => sum + account.targetBalance, 0);\n      const totalTargetEUR = eurAccounts.reduce((sum, account) => sum + account.targetBalance, 0);\n      const performanceUSD = totalTargetUSD > 0 ? totalBalanceUSD / totalTargetUSD * 100 : 0;\n      const performanceEUR = totalTargetEUR > 0 ? totalBalanceEUR / totalTargetEUR * 100 : 0;\n      return {\n        totalAccounts: accounts.length,\n        totalBalanceUSD,\n        totalBalanceEUR,\n        totalTargetUSD,\n        totalTargetEUR,\n        performanceUSD,\n        performanceEUR\n      };\n    }));\n  }\n  static {\n    this.ɵfac = function AccountService_Factory(t) {\n      return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AccountService,\n      factory: AccountService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AccountService };","map":{"version":3,"names":["BehaviorSubject","map","tap","of","AccountService","constructor","http","apiUrl","accountsSubject","accounts$","asObservable","mockAccounts","id","name","broker","currency","currentBalance","targetBalance","withdrawalThreshold","totalDeposits","totalWithdrawals","createdAt","Date","updatedAt","next","loadAccounts","setTimeout","getAccounts","getAccountById","pipe","accounts","find","account","getAccountsByBroker","filter","getAccountsByCurrency","createAccount","newAccount","Math","random","toString","substring","createdAccount","currentAccounts","value","updateAccount","index","findIndex","a","updatedAccount","updatedAccounts","deleteAccount","undefined","getAccountSummary","usdAccounts","eurAccounts","totalBalanceUSD","reduce","sum","totalBalanceEUR","totalTargetUSD","totalTargetEUR","performanceUSD","performanceEUR","totalAccounts","length","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/vagrant/workspace/windsurf/tradetracker/frontend-tradetracker/src/app/services/account.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, map, tap, of } from 'rxjs';\nimport { Account, AccountSummary, Currency, Broker } from '../models/account.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n  private apiUrl = 'api/accounts';\n  private accountsSubject = new BehaviorSubject<Account[]>([]);\n  accounts$ = this.accountsSubject.asObservable();\n  \n  // Données mockées pour simuler les réponses API\n  private mockAccounts: Account[] = [\n    {\n      id: '1',\n      name: 'Compte Trading Principal',\n      broker: 'Roboforex',\n      currency: 'USD',\n      currentBalance: 12450.75,\n      targetBalance: 15000,\n      withdrawalThreshold: 13000,\n      totalDeposits: 10000,\n      totalWithdrawals: 2000,\n      createdAt: new Date('2024-01-15'),\n      updatedAt: new Date('2025-04-28')\n    },\n    {\n      id: '2',\n      name: 'Compte EUR Stratégie',\n      broker: 'IC Markets',\n      currency: 'EUR',\n      currentBalance: 8750.50,\n      targetBalance: 10000,\n      withdrawalThreshold: 9000,\n      totalDeposits: 7500,\n      totalWithdrawals: 1000,\n      createdAt: new Date('2024-02-10'),\n      updatedAt: new Date('2025-05-15')\n    },\n    {\n      id: '3',\n      name: 'Compte Test Algorithmes',\n      broker: 'Roboforex',\n      currency: 'USD',\n      currentBalance: 3200.25,\n      targetBalance: 5000,\n      withdrawalThreshold: 4000,\n      totalDeposits: 3000,\n      totalWithdrawals: 0,\n      createdAt: new Date('2024-03-05'),\n      updatedAt: new Date('2025-05-10')\n    },\n    {\n      id: '4',\n      name: 'Compte EUR Conservateur',\n      broker: 'Other',\n      currency: 'EUR',\n      currentBalance: 5150.80,\n      targetBalance: 6000,\n      withdrawalThreshold: 5500,\n      totalDeposits: 5000,\n      totalWithdrawals: 500,\n      createdAt: new Date('2024-04-20'),\n      updatedAt: new Date('2025-05-18')\n    },\n    {\n      id: '5',\n      name: 'Compte USD Agressif',\n      broker: 'IC Markets',\n      currency: 'USD',\n      currentBalance: 7820.45,\n      targetBalance: 10000,\n      withdrawalThreshold: 8500,\n      totalDeposits: 6000,\n      totalWithdrawals: 0,\n      createdAt: new Date('2024-05-01'),\n      updatedAt: new Date('2025-05-19')\n    }\n  ];\n\n  constructor(private http: HttpClient) {\n    // Initialiser avec les données mockées au lieu d'appeler l'API\n    this.accountsSubject.next(this.mockAccounts);\n  }\n\n  // Méthode mockée pour simuler le chargement des comptes depuis l'API\n  private loadAccounts(): void {\n    // Simuler un délai de réseau\n    setTimeout(() => {\n      this.accountsSubject.next(this.mockAccounts);\n    }, 300);\n  }\n\n  getAccounts(): Observable<Account[]> {\n    return this.accounts$;\n  }\n\n  getAccountById(id: string): Observable<Account | undefined> {\n    return this.accounts$.pipe(\n      map(accounts => accounts.find(account => account.id === id))\n    );\n  }\n\n  getAccountsByBroker(broker: string): Observable<Account[]> {\n    return this.accounts$.pipe(\n      map(accounts => accounts.filter(account => account.broker === broker))\n    );\n  }\n\n  getAccountsByCurrency(currency: Currency): Observable<Account[]> {\n    return this.accounts$.pipe(\n      map(accounts => accounts.filter(account => account.currency === currency))\n    );\n  }\n\n  createAccount(account: Omit<Account, 'id' | 'createdAt' | 'updatedAt'>): Observable<Account> {\n    // Simuler la création d'un compte avec un ID généré\n    const newAccount: Account = {\n      ...account as any,\n      id: Math.random().toString(36).substring(2, 11),\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    \n    // Simuler un délai de réseau\n    return of(newAccount).pipe(\n      tap(createdAccount => {\n        const currentAccounts = this.accountsSubject.value;\n        this.accountsSubject.next([...currentAccounts, createdAccount]);\n      })\n    );\n  }\n\n  updateAccount(id: string, account: Partial<Account>): Observable<Account> {\n    // Trouver le compte à mettre à jour\n    const currentAccounts = this.accountsSubject.value;\n    const index = currentAccounts.findIndex(a => a.id === id);\n    \n    if (index === -1) {\n      return of(null as any);\n    }\n    \n    // Créer le compte mis à jour\n    const updatedAccount: Account = {\n      ...currentAccounts[index],\n      ...account,\n      updatedAt: new Date()\n    };\n    \n    // Mettre à jour la liste des comptes\n    const updatedAccounts = [...currentAccounts];\n    updatedAccounts[index] = updatedAccount;\n    \n    // Simuler un délai de réseau\n    return of(updatedAccount).pipe(\n      tap(() => {\n        this.accountsSubject.next(updatedAccounts);\n      })\n    );\n  }\n\n  deleteAccount(id: string): Observable<void> {\n    // Simuler un délai de réseau\n    return of(undefined).pipe(\n      tap(() => {\n        const currentAccounts = this.accountsSubject.value;\n        this.accountsSubject.next(currentAccounts.filter(account => account.id !== id));\n      })\n    );\n  }\n\n  getAccountSummary(): Observable<AccountSummary> {\n    return this.accounts$.pipe(\n      map(accounts => {\n        const usdAccounts = accounts.filter(account => account.currency === 'USD');\n        const eurAccounts = accounts.filter(account => account.currency === 'EUR');\n\n        const totalBalanceUSD = usdAccounts.reduce((sum, account) => sum + account.currentBalance, 0);\n        const totalBalanceEUR = eurAccounts.reduce((sum, account) => sum + account.currentBalance, 0);\n        \n        const totalTargetUSD = usdAccounts.reduce((sum, account) => sum + account.targetBalance, 0);\n        const totalTargetEUR = eurAccounts.reduce((sum, account) => sum + account.targetBalance, 0);\n        \n        const performanceUSD = totalTargetUSD > 0 ? (totalBalanceUSD / totalTargetUSD) * 100 : 0;\n        const performanceEUR = totalTargetEUR > 0 ? (totalBalanceEUR / totalTargetEUR) * 100 : 0;\n\n        return {\n          totalAccounts: accounts.length,\n          totalBalanceUSD,\n          totalBalanceEUR,\n          totalTargetUSD,\n          totalTargetEUR,\n          performanceUSD,\n          performanceEUR\n        };\n      })\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
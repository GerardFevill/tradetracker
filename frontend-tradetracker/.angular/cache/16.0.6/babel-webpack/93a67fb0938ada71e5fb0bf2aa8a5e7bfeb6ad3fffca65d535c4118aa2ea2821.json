{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { combineLatest, map } from 'rxjs';\nlet TransactionsComponent = class TransactionsComponent {\n  constructor(transactionService, accountService) {\n    this.transactionService = transactionService;\n    this.accountService = accountService;\n    this.selectedType = 'all';\n    this.selectedCurrency = 'all';\n    this.selectedAccountId = 'all';\n  }\n  ngOnInit() {\n    this.accounts$ = this.accountService.getAccounts();\n    // Combine transactions with account names\n    this.transactions$ = combineLatest([this.transactionService.getTransactions(), this.accountService.getAccounts()]).pipe(map(([transactions, accounts]) => {\n      return transactions.map(transaction => {\n        const account = accounts.find(a => a.id === transaction.accountId);\n        return {\n          ...transaction,\n          accountName: account ? account.name : 'Compte inconnu'\n        };\n      });\n    }),\n    // Sort by date, newest first\n    map(transactions => transactions.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())));\n    this.filteredTransactions$ = this.transactions$;\n  }\n  filterByType(type) {\n    this.selectedType = type;\n    this.applyFilters();\n  }\n  filterByCurrency(currency) {\n    this.selectedCurrency = currency;\n    this.applyFilters();\n  }\n  filterByAccount(accountId) {\n    this.selectedAccountId = accountId;\n    this.applyFilters();\n  }\n  applyFilters() {\n    this.filteredTransactions$ = this.transactions$.pipe(map(transactions => {\n      let filtered = transactions;\n      // Filter by type\n      if (this.selectedType !== 'all') {\n        filtered = filtered.filter(t => t.type === this.selectedType);\n      }\n      // Filter by currency\n      if (this.selectedCurrency !== 'all') {\n        filtered = filtered.filter(t => t.currency === this.selectedCurrency);\n      }\n      // Filter by account\n      if (this.selectedAccountId !== 'all') {\n        filtered = filtered.filter(t => t.accountId === this.selectedAccountId);\n      }\n      return filtered;\n    }));\n  }\n  getTotalAmount(transactions) {\n    return transactions.reduce((totals, transaction) => {\n      const currency = transaction.currency;\n      if (!totals[currency]) {\n        totals[currency] = 0;\n      }\n      if (transaction.type === 'deposit') {\n        totals[currency] += transaction.amount;\n      } else {\n        totals[currency] -= transaction.amount;\n      }\n      return totals;\n    }, {});\n  }\n};\nTransactionsComponent = __decorate([Component({\n  selector: 'app-transactions',\n  templateUrl: './transactions.component.html',\n  styleUrls: ['./transactions.component.css']\n})], TransactionsComponent);\nexport { TransactionsComponent };","map":{"version":3,"names":["Component","combineLatest","map","TransactionsComponent","constructor","transactionService","accountService","selectedType","selectedCurrency","selectedAccountId","ngOnInit","accounts$","getAccounts","transactions$","getTransactions","pipe","transactions","accounts","transaction","account","find","a","id","accountId","accountName","name","sort","b","Date","date","getTime","filteredTransactions$","filterByType","type","applyFilters","filterByCurrency","currency","filterByAccount","filtered","filter","t","getTotalAmount","reduce","totals","amount","__decorate","selector","templateUrl","styleUrls"],"sources":["/home/vagrant/workspace/windsurf/tradetracker/frontend-tradetracker/src/app/components/transactions/transactions.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Observable, combineLatest, map } from 'rxjs';\nimport { TransactionService } from '../../services/transaction.service';\nimport { AccountService } from '../../services/account.service';\nimport { Transaction } from '../../models/transaction.model';\nimport { Account, Currency } from '../../models/account.model';\n\ninterface TransactionWithAccountName extends Transaction {\n  accountName: string;\n}\n\n@Component({\n  selector: 'app-transactions',\n  templateUrl: './transactions.component.html',\n  styleUrls: ['./transactions.component.css']\n})\nexport class TransactionsComponent implements OnInit {\n  transactions$!: Observable<TransactionWithAccountName[]>;\n  filteredTransactions$!: Observable<TransactionWithAccountName[]>;\n  \n  selectedType: 'all' | 'deposit' | 'withdrawal' = 'all';\n  selectedCurrency: Currency | 'all' = 'all';\n  selectedAccountId: string | 'all' = 'all';\n  \n  accounts$!: Observable<Account[]>;\n  \n  constructor(\n    private transactionService: TransactionService,\n    private accountService: AccountService\n  ) {}\n\n  ngOnInit(): void {\n    this.accounts$ = this.accountService.getAccounts();\n    \n    // Combine transactions with account names\n    this.transactions$ = combineLatest([\n      this.transactionService.getTransactions(),\n      this.accountService.getAccounts()\n    ]).pipe(\n      map(([transactions, accounts]) => {\n        return transactions.map(transaction => {\n          const account = accounts.find(a => a.id === transaction.accountId);\n          return {\n            ...transaction,\n            accountName: account ? account.name : 'Compte inconnu'\n          };\n        });\n      }),\n      // Sort by date, newest first\n      map(transactions => \n        transactions.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n      )\n    );\n    \n    this.filteredTransactions$ = this.transactions$;\n  }\n  \n  filterByType(type: 'all' | 'deposit' | 'withdrawal'): void {\n    this.selectedType = type;\n    this.applyFilters();\n  }\n  \n  filterByCurrency(currency: Currency | 'all'): void {\n    this.selectedCurrency = currency;\n    this.applyFilters();\n  }\n  \n  filterByAccount(accountId: string | 'all'): void {\n    this.selectedAccountId = accountId;\n    this.applyFilters();\n  }\n  \n  private applyFilters(): void {\n    this.filteredTransactions$ = this.transactions$.pipe(\n      map(transactions => {\n        let filtered = transactions;\n        \n        // Filter by type\n        if (this.selectedType !== 'all') {\n          filtered = filtered.filter(t => t.type === this.selectedType);\n        }\n        \n        // Filter by currency\n        if (this.selectedCurrency !== 'all') {\n          filtered = filtered.filter(t => t.currency === this.selectedCurrency);\n        }\n        \n        // Filter by account\n        if (this.selectedAccountId !== 'all') {\n          filtered = filtered.filter(t => t.accountId === this.selectedAccountId);\n        }\n        \n        return filtered;\n      })\n    );\n  }\n  \n  getTotalAmount(transactions: TransactionWithAccountName[]): { [key in Currency]: number } {\n    return transactions.reduce((totals, transaction) => {\n      const currency = transaction.currency;\n      if (!totals[currency]) {\n        totals[currency] = 0;\n      }\n      \n      if (transaction.type === 'deposit') {\n        totals[currency] += transaction.amount;\n      } else {\n        totals[currency] -= transaction.amount;\n      }\n      \n      return totals;\n    }, {} as { [key in Currency]: number });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
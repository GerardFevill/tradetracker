{"ast":null,"code":"import { combineLatest, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./account.service\";\nimport * as i2 from \"./transaction.service\";\nclass AnalyticsService {\n  constructor(accountService, transactionService) {\n    this.accountService = accountService;\n    this.transactionService = transactionService;\n    // Default exchange rate, should be updated from settings\n    this.exchangeRate = {\n      EUR_TO_USD: 1.1,\n      USD_TO_EUR: 0.91\n    };\n  }\n  setExchangeRates(eurToUsd, usdToEur) {\n    this.exchangeRate = {\n      EUR_TO_USD: eurToUsd,\n      USD_TO_EUR: usdToEur\n    };\n  }\n  getAccountPerformance(accountId) {\n    return this.accountService.getAccountById(accountId).pipe(map(account => {\n      if (!account) return 0;\n      return account.targetBalance > 0 ? account.currentBalance / account.targetBalance * 100 : 0;\n    }));\n  }\n  getWithdrawalSuggestions(accountId) {\n    return this.accountService.getAccountById(accountId).pipe(map(account => {\n      if (!account || account.currentBalance <= account.withdrawalThreshold) return 0;\n      // Suggest withdrawing anything above the threshold\n      return account.currentBalance - account.withdrawalThreshold;\n    }));\n  }\n  getAccountsAboveThreshold() {\n    return this.accountService.getAccounts().pipe(map(accounts => accounts.filter(account => account.currentBalance >= account.withdrawalThreshold)));\n  }\n  getTotalBalanceInCurrency(targetCurrency) {\n    return this.accountService.getAccounts().pipe(map(accounts => {\n      return accounts.reduce((total, account) => {\n        let balance = account.currentBalance;\n        // Convert if currencies don't match\n        if (account.currency !== targetCurrency) {\n          balance = this.convertCurrency(balance, account.currency, targetCurrency);\n        }\n        return total + balance;\n      }, 0);\n    }));\n  }\n  convertCurrency(amount, fromCurrency, toCurrency) {\n    if (fromCurrency === toCurrency) return amount;\n    if (fromCurrency === 'EUR' && toCurrency === 'USD') {\n      return amount * this.exchangeRate.EUR_TO_USD;\n    } else {\n      return amount * this.exchangeRate.USD_TO_EUR;\n    }\n  }\n  getAccountProfitLoss(accountId) {\n    return combineLatest([this.accountService.getAccountById(accountId), this.transactionService.getTotalDepositsByAccount(accountId), this.transactionService.getTotalWithdrawalsByAccount(accountId)]).pipe(map(([account, totalDeposits, totalWithdrawals]) => {\n      if (!account) return 0;\n      // Profit/Loss = Current Balance + Total Withdrawals - Total Deposits\n      return account.currentBalance + totalWithdrawals - totalDeposits;\n    }));\n  }\n  getAccountROI(accountId) {\n    return combineLatest([this.accountService.getAccountById(accountId), this.transactionService.getTotalDepositsByAccount(accountId), this.transactionService.getTotalWithdrawalsByAccount(accountId)]).pipe(map(([account, totalDeposits, totalWithdrawals]) => {\n      if (!account || totalDeposits === 0) return 0;\n      // ROI = (Current Balance + Total Withdrawals - Total Deposits) / Total Deposits * 100\n      const profitLoss = account.currentBalance + totalWithdrawals - totalDeposits;\n      return profitLoss / totalDeposits * 100;\n    }));\n  }\n  static {\n    this.ɵfac = function AnalyticsService_Factory(t) {\n      return new (t || AnalyticsService)(i0.ɵɵinject(i1.AccountService), i0.ɵɵinject(i2.TransactionService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AnalyticsService,\n      factory: AnalyticsService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AnalyticsService };","map":{"version":3,"names":["combineLatest","map","AnalyticsService","constructor","accountService","transactionService","exchangeRate","EUR_TO_USD","USD_TO_EUR","setExchangeRates","eurToUsd","usdToEur","getAccountPerformance","accountId","getAccountById","pipe","account","targetBalance","currentBalance","getWithdrawalSuggestions","withdrawalThreshold","getAccountsAboveThreshold","getAccounts","accounts","filter","getTotalBalanceInCurrency","targetCurrency","reduce","total","balance","currency","convertCurrency","amount","fromCurrency","toCurrency","getAccountProfitLoss","getTotalDepositsByAccount","getTotalWithdrawalsByAccount","totalDeposits","totalWithdrawals","getAccountROI","profitLoss","i0","ɵɵinject","i1","AccountService","i2","TransactionService","factory","ɵfac","providedIn"],"sources":["/home/vagrant/workspace/windsurf/tradetracker/frontend-tradetracker/src/app/services/analytics.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, combineLatest, map } from 'rxjs';\nimport { Account, Currency } from '../models/account.model';\nimport { AccountService } from './account.service';\nimport { TransactionService } from './transaction.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AnalyticsService {\n  // Default exchange rate, should be updated from settings\n  private exchangeRate = { EUR_TO_USD: 1.1, USD_TO_EUR: 0.91 };\n\n  constructor(\n    private accountService: AccountService,\n    private transactionService: TransactionService\n  ) {}\n\n  setExchangeRates(eurToUsd: number, usdToEur: number): void {\n    this.exchangeRate = { EUR_TO_USD: eurToUsd, USD_TO_EUR: usdToEur };\n  }\n\n  getAccountPerformance(accountId: string): Observable<number> {\n    return this.accountService.getAccountById(accountId).pipe(\n      map(account => {\n        if (!account) return 0;\n        return account.targetBalance > 0 \n          ? (account.currentBalance / account.targetBalance) * 100 \n          : 0;\n      })\n    );\n  }\n\n  getWithdrawalSuggestions(accountId: string): Observable<number> {\n    return this.accountService.getAccountById(accountId).pipe(\n      map(account => {\n        if (!account || account.currentBalance <= account.withdrawalThreshold) return 0;\n        // Suggest withdrawing anything above the threshold\n        return account.currentBalance - account.withdrawalThreshold;\n      })\n    );\n  }\n\n  getAccountsAboveThreshold(): Observable<Account[]> {\n    return this.accountService.getAccounts().pipe(\n      map(accounts => accounts.filter(account => \n        account.currentBalance >= account.withdrawalThreshold\n      ))\n    );\n  }\n\n  getTotalBalanceInCurrency(targetCurrency: Currency): Observable<number> {\n    return this.accountService.getAccounts().pipe(\n      map(accounts => {\n        return accounts.reduce((total, account) => {\n          let balance = account.currentBalance;\n          \n          // Convert if currencies don't match\n          if (account.currency !== targetCurrency) {\n            balance = this.convertCurrency(\n              balance, \n              account.currency, \n              targetCurrency\n            );\n          }\n          \n          return total + balance;\n        }, 0);\n      })\n    );\n  }\n\n  private convertCurrency(\n    amount: number, \n    fromCurrency: Currency, \n    toCurrency: Currency\n  ): number {\n    if (fromCurrency === toCurrency) return amount;\n    \n    if (fromCurrency === 'EUR' && toCurrency === 'USD') {\n      return amount * this.exchangeRate.EUR_TO_USD;\n    } else {\n      return amount * this.exchangeRate.USD_TO_EUR;\n    }\n  }\n\n  getAccountProfitLoss(accountId: string): Observable<number> {\n    return combineLatest([\n      this.accountService.getAccountById(accountId),\n      this.transactionService.getTotalDepositsByAccount(accountId),\n      this.transactionService.getTotalWithdrawalsByAccount(accountId)\n    ]).pipe(\n      map(([account, totalDeposits, totalWithdrawals]) => {\n        if (!account) return 0;\n        // Profit/Loss = Current Balance + Total Withdrawals - Total Deposits\n        return account.currentBalance + totalWithdrawals - totalDeposits;\n      })\n    );\n  }\n\n  getAccountROI(accountId: string): Observable<number> {\n    return combineLatest([\n      this.accountService.getAccountById(accountId),\n      this.transactionService.getTotalDepositsByAccount(accountId),\n      this.transactionService.getTotalWithdrawalsByAccount(accountId)\n    ]).pipe(\n      map(([account, totalDeposits, totalWithdrawals]) => {\n        if (!account || totalDeposits === 0) return 0;\n        // ROI = (Current Balance + Total Withdrawals - Total Deposits) / Total Deposits * 100\n        const profitLoss = account.currentBalance + totalWithdrawals - totalDeposits;\n        return (profitLoss / totalDeposits) * 100;\n      })\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
version: '3.8'

services:
  # Service PostgreSQL
  postgres:
    image: postgres:14-alpine
    container_name: tradetracker-postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "7432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend-tradetracker/db_schema.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tradetracker-network
    restart: unless-stopped

  # Service Backend
  backend:
    image: amesika2/tradetracker-backend:latest
    container_name: tradetracker-backend
    environment:
      NODE_ENV: ${NODE_ENV}
      DB_HOST: postgres
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      PORT: ${API_PORT}
    ports:
      - "3000:3000"
    depends_on:
      - postgres
    volumes:
      - ./backend-tradetracker:/app
      - /app/node_modules
    networks:
      - tradetracker-network
    restart: unless-stopped

  # Service Frontend avec Nginx intégré
  frontend:
    image: amesika2/tradetracker-frontend:latest
    container_name: tradetracker-frontend
    ports:
      - "4201:80"
      - "4202:443"
    depends_on:
      - backend
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
    environment:
      # Configuration pour utiliser le nom du service backend dans le réseau Docker
      # Le port 3000 est le port interne du conteneur backend
      API_URL: http://backend:3000/api
    networks:
      - tradetracker-network
    restart: unless-stopped

networks:
  tradetracker-network:
    driver: bridge

volumes:
  postgres_data:
